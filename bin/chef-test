#!/usr/bin/env ruby
require 'bundler/setup'
require 'common_libs'

# Vars
branch = SimpleConfig.git.branch.match(%r{origin/(.*)})[1]
pwd = Dir.pwd

# Get cookbooks
LOGGER.info("Git: clone #{SimpleConfig.git.url} branch #{branch}")
cookbooks = Cookbooks.get_changes(SimpleConfig.git.url, SimpleConfig.git.commit)

LOGGER.info("Cookbooks: Find changes in: #{cookbooks}")
skipped_cookbooks = cookbooks.reject { |c| File.exist?("cookbooks/#{c}/ci.yml") }
cookbooks.select! { |c| File.exist?("cookbooks/#{c}/ci.yml") }
LOGGER.info("Cookbooks: test #{cookbooks}") if cookbooks.any?
LOGGER.warn("Cookbooks: skip #{skipped_cookbooks}") if skipped_cookbooks.any?

nodes = []
threads = []
if cookbooks.any?
  # Create environment
  chef_env = Env.new
  chef_env.create
  LOGGER.info("Chef: create environment #{chef_env.name}")

  # Update environment
  LOGGER.info("Berks: update #{chef_env.name} environment from #{branch}")
  Dir.chdir 'berks'
  chef_env.update(branch, cookbooks)
  LOGGER.info("Berks: created environment #{chef_env.name}")
  chef_env.show
  Dir.chdir pwd

  # NodeUp/Down
  cookbooks.each do |cookbook|
    ci_config = YAML.load(File.read("cookbooks/#{cookbook}/ci.yml"))
    LOGGER.info("Deploy: using cookbook #{cookbook} with config: #{ci_config}")
    threads << Thread.new do
      node              = Node.new(autogen: ci_config['chef']['role'])
      node.role         = ci_config['chef']['role']
      node.env          = chef_env.name
      node.chef_version = ci_config['chef']['version']
      node.image        = ci_config['linode']['image']

      node.create(flavor: ci_config['linode']['flavor'],
                  template: BOOTSTRAP_TEMPLATE,
                  maintain: true)
      File.write("#{LOG_PATH}/build_#{node.name}.log", node.output)
      nodes.push node
      node.delete
    end
  end
  threads.each(&:join)
  # Delete environment
  LOGGER.info("Chef: delete environment #{chef_env.name}")
  chef_env.delete
else
  LOGGER.info('Skip testing: no changes.')
end

deployed = nodes.select(&:status)
rejected = nodes.reject(&:status)

LOGGER.info 'Passed the following nodes:' if deployed.any?
deployed.each do |node|
  LOGGER.info node.name
  LOGGER.info "BuildLog: #{ENV['JENKINS_WSLOG_URL']}/build_#{node.name}.log" if ENV['JENKINS_WSLOG_URL']
end

LOGGER.warn 'Failed the following nodes:' if rejected.any?
rejected.each do |node|
  LOGGER.warn node.name
  LOGGER.warn "BuildLog: #{ENV['JENKINS_WSLOG_URL']}/build_#{node.name}.log" if ENV['JENKINS_WSLOG_URL']
end

exit 1 if rejected.any?
